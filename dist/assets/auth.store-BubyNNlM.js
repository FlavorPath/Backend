import{c as T}from "./react-B2qnJnne.js";function _(a, i){let r;try{r=a()}catch{return}return{getItem: o=>{var t;const u= d=>d===null?null:JSON.parse(d,void 0),l=(t=r.getItem(o))!=null?t:null;return l instanceof Promise?l.then(u):u(l)},setItem:(o, t)=>r.setItem(o,JSON.stringify(t,void 0)),removeItem: o=>r.removeItem(o)}}const p= a=> i=>{try{const r=a(i);return r instanceof Promise?r:{then(n){return p(n)(r)},catch(n){return this}}}catch(r){return{then(n){return this},catch(n){return p(n)(r)}}}},b=(a, i)=>(r, n, o)=>{let t={storage:_(()=>localStorage),partialize: e=>e,version:0,merge:(e, g)=>({...g,...e}),...i},u=!1;const l=new Set,d=new Set;let c=t.storage;if(!c)return a((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${t.name}', the given storage is currently unavailable.`),r(...e)},n,o);const I=()=>{const e=t.partialize({...n()});return c.setItem(t.name,{state:e,version:t.version})},S=o.setState;o.setState=(e, g)=>{S(e,g),I()};const v=a((...e)=>{r(...e),I()},n,o);o.getInitialState=()=>v;let m;const y=()=>{var e,g;if(!c)return;u=!1,l.forEach(s=>{var f;return s((f=n())!=null?f:v)});const h=((g=t.onRehydrateStorage)==null?void 0:g.call(t,(e=n())!=null?e:v))||void 0;return p(c.getItem.bind(c))(t.name).then(s=>{if(s)if(typeof s.version=="number"&&s.version!==t.version){if(t.migrate)return[!0,t.migrate(s.state,s.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,s.state];return[!1,void 0]}).then(s=>{var f;const[k,L]=s;if(m=t.merge(L,(f=n())!=null?f:v),r(m,!0),k)return I()}).then(()=>{h==null||h(m,void 0),m=n(),u=!0,d.forEach(s=>s(m))}).catch(s=>{h==null||h(void 0,s)})};return o.persist={setOptions: e=>{t={...t,...e},e.storage&&(c=e.storage)},clearStorage:()=>{c==null||c.removeItem(t.name)},getOptions:()=>t,rehydrate:()=>y(),hasHydrated:()=>u,onHydrate: e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration: e=>(d.add(e),()=>{d.delete(e)})},t.skipHydration||y(),m||v},H=b,w=T()(H(a=>({isLoggedIn:!1,accessToken:"",setAccessToken: i=>{a({accessToken:i,isLoggedIn:!!i}),localStorage.setItem("@token",i)},logout:()=>a({accessToken:"",isLoggedIn:!1})}),{name:"auth-storage",partialize: a=>({isLoggedIn:a.isLoggedIn,accessToken:a.accessToken})}));export{w as u};
